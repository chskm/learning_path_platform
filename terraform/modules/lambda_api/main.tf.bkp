resource "aws_lambda_function" "ml_api" {
  function_name = "${var.app_name}-ml-api"
  handler       = "api.handler"
  runtime       = "python3.11"
  role          = aws_iam_role.lambda_role.arn
  filename      = "${path.module}/ml_api.zip"
  vpc_config {
    subnet_ids         = var.subnet_ids
    security_group_ids = var.security_group_ids
  }
  environment {
    variables = {
      MODEL_PATH = "/tmp/model.pkl"
    }
  }
  timeout     = 30
  memory_size = 256
  tags = {
    Name = "${var.app_name}-ml-api"
  }
}

resource "aws_api_gateway_rest_api" "ml_api" {
  name = "${var.app_name}-ml-api"
}

resource "aws_api_gateway_resource" "ml_resource" {
  rest_api_id = aws_api_gateway_rest_api.ml_api.id
  parent_id   = aws_api_gateway_rest_api.ml_api.root_resource_id
  path_part   = "recommend"
}

resource "aws_api_gateway_method" "ml_method" {
  rest_api_id   = aws_api_gateway_rest_api.ml_api.id
  resource_id   = aws_api_gateway_resource.ml_resource.id
  http_method   = "POST"
  authorization = "NONE"
}

resource "aws_api_gateway_integration" "ml_integration" {
  rest_api_id             = aws_api_gateway_rest_api.ml_api.id
  resource_id             = aws_api_gateway_resource.ml_resource.id
  http_method             = aws_api_gateway_method.ml_method.http_method
  integration_http_method = "POST"
  type                    = "AWS_PROXY"
  uri                     = aws_lambda_function.ml_api.invoke_arn
}

resource "aws_api_gateway_deployment" "ml_deployment" {
  rest_api_id = aws_api_gateway_rest_api.ml_api.id
  depends_on  = [aws_api_gateway_integration.ml_integration]
  stage_name  = "prod"
}

resource "aws_iam_role" "lambda_role" {
  name = "${var.app_name}-lambda-role"
  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "lambda.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_role_policy" "lambda_policy" {
  name   = "${var.app_name}-lambda-policy"
  role   = aws_iam_role.lambda_role.id
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "logs:CreateLogGroup",
          "logs:CreateLogStream",
          "logs:PutLogEvents",
          "ec2:CreateNetworkInterface",
          "ec2:DescribeNetworkInterfaces",
          "ec2:DeleteNetworkInterface"
        ]
        Resource = "*"
      }
    ]
  })
}

resource "aws_lambda_permission" "api_gateway" {
  statement_id  = "AllowAPIGatewayInvoke"
  action        = "lambda:InvokeFunction"
  function_name = aws_lambda_function.ml_api.function_name
  principal     = "apigateway.amazonaws.com"
  source_arn    = "${aws_api_gateway_rest_api.ml_api.execution_arn}/*/*"
}